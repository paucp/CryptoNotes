<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="materialContextMenuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>110, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOwAAADsAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIl8
        XSmLfWDvi31g/4t9YP+LfWD/i31g/4t9YP+LfWD/i31g/56UfMaupJD/rqSQ/66kkP+upJD/rqSQ/66k
        kP+upJD/rqSRwgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAin5gVYt9YP+LfWD/i31g/4t9YP+LfWD/i31g/4t9YP+LfWD/npR8xq6kkP+upJD/rqSQ/66k
        kP+upJD/rqSQ/66kkP+upJD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACKfmBVi31g/4t9YP+LfWD/i31g/4t9YP+LfWD/i31g/4t9YP+elHzGrqSQ/66k
        kP+upJD/rqSQ/66kkP+upJD/rqSQ/66kkP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIp+YFWLfWD/i31g/4t9YP+LfWD/i31g/4t9YP+LfWD/i31g/56U
        fMaupJD/rqSQ/66kkP+upJD/rqSQ/66kkP+upJD/rqSQ/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin5gVYt9YP+LfWD/i31g/4t9YP+LfWD/i31g/4t9
        YP+LfWD/npR8xq6kkP+upJD/rqSQ/66kkP+upJD/rqSQ/66kkP+upJD/AAAAAAWz7WEGr+jPB67m4weu
        5uMHrubjB67m4weu5uMHrubjB67m4wez7dAIwv+qCML/qgjC/6pEsc7Eh5uR7IebkeyHm5Hsh5qP6pCZ
        iNuBdVjHgXVYx4F1WMeBdlzFgXZcx4F2XMeJfGO1kIJnxpCCZ8aQgmfGkIJnxpCCZ8YGseyGBqje/wao
        3v8GqN7/Bqje/wao3v8GqN7/Bqje/wao3v8GqN7/BrDp/wfB//8Hwf//B8H//z+42v+upJD/rqSQ/66k
        kP+upJD/rqSQ/3puVP96blT/em5U/3puVP96blT/em5U/3xxVseLfWD/i31g/4t9YP+LfWD/i31g/war
        4/cGqN7/Bqje/wao3v8GqN7/Bqje/wao3v8GqN7/Bqje/wao3v8GsOn/B8H//wfB//8Hwf//P7ja/66k
        kP+upJD/rqSQ/66kkP+upJD/em5U/3puVP96blT/em5U/3puVP96blT/fHFWx4t9YP+LfWD/i31g/4t9
        YP+LfWD/Bqje/wao3v8GqN7/Bqje/wao3v8GqN7/Bqje/wao3v8GqN7/Bqje/waw6f8Hwf//B8H//wfB
        //8/uNr/rqSQ/66kkP+upJD/rqSQ/66kkP96blT/em5U/3puVP96blT/em5U/3puVP98cVbHi31g/4t9
        YP+LfWD/i31g/4t9YP8GqN7/Bqje/wao3v8GqN7/Bqje/wao3v8GqN7/Bqje/wao3v8GqN7/BrDp/wfB
        //8Hwf//B8H//z+42v+upJD/rqSQ/66kkP+upJD/rqSQ/3puVP96blT/em5U/3puVP96blT/em5U/3xx
        VseLfWD/i31g/4t9YP+LfWD/i31g/wao3v8GqN7/Bqje/wao3v8GqN7/Bqje/wao3v8GqN7/Bqje/wao
        3v8GsOn/B8H//wfB//8Hwf//P7ja/66kkP+upJD/rqSQ/66kkP+upJD/em5U/3puVP96blT/em5U/3pu
        VP96blT/fHFWx4t9YP+LfWD/i31g/4t9YP+LfWD/Bqje/wao3v8GqN7/Bqje/wao3v8GqN7/Bqje/wao
        3v8GqN7/Bqje/waw6f8Hwf//B8H//wfB//8jvO3/pKWX/66kkP+upJD/rqSQ/66kkP96blT/em5U/3pu
        VP96blT/em5U/3puVP98cVbHi31g/4t9YP+LfWD/i31g/4t+X8MGqN7/Bqje/wao3v8GqN7/Bqje/wao
        3v8GqN7/Bqje/wao3v8GqN7/BrDp/wfB//8Hwf//B8H//wfB//8Hwf//B8H//wfB//8Hwf//B8H//wfB
        //8GwP9VAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAao3v8GqN7/Bqje/wao
        3v8GqN7/Bqje/wao3v8GqN7/Bqje/wao3v8GsOn/B8H//wfB//8Hwf//B8H//wfB//8Hwf//B8H//wfB
        //8Hwf//B8H//wbA/1UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABqje/wao
        3v8GqN7/Bqje/wao3v8GqN7/Bqje/wao3v8GqN7/Bqje/waw6f8Hwf//B8H//wfB//8Hwf//B8H//wfB
        //8Hwf//B8H//wfB//8Hwf//BsD/VQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAGqN7/Bqje/wao3v8GqN7/Bqje/wao3v8GqN7/Bqje/wao3v8GqN7/BrDp/wfB//8Hwf//B8H//wfB
        //8Hwf//B8H//wfB//8Hwf//B8H//wfB//8GwP9VAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAao3v8GqN7/Bqje/wao3v8GqN7/Bqje/wao3v8GqN7/Bqje/wao3v8GsOn/B8H//wfB
        //8Hwf//B8H//wfB//8Hwf//B8H//wfB//8Hwf//B8H//wbA/1UAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAABqje/wao3v8GqN7/Bqje/wao3v8GqN7/Bqje/wao3v8GqN7/Bqje/waw
        6f8Hwf//B8H//wfB//8Hwf//B8H//wfB//8Hwf//B8H//wfB//8Hwf//BsD/VQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGqN7/Bqje/wao3v8GqN7/Bqje/wao3v8GqN7/Bqje/wao
        3v8GqN7/BrDp/wfB//8Hwf//B8H//wfB//8Hwf//B8H//wfB//8Hwf//B8H//wfB//8GwP9VAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAao3v8GqN7/Bqje/wao3v8GqN7/Bqje/wao
        3v8GqN7/Bqje/wao3v8GsOn/B8H//wfB//8Hwf//B8H//wfB//8Hwf//B8H//wfB//8Hwf//B8H//wbB
        /1IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABqzj9wao3v8GqN7/Bqje/wao
        3v8GqN7/Bqje/wao3v8GqN7/Bqje/waw6f8Hwf//B8H//wfB//8Hwf//B8H//wfB//8Hwf//B8H//wfB
        //8Hwf//Br//KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGseyGBqje/wao
        3v8GqN7/Bqje/wao3v8GqN7/Bqje/wao3v8GqN7/BrDp/wfB//8Hwf//B8H//wfB//8Hwf//B8H//wfB
        //8Hwf//B8H//wbB/6EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAItO1iBq/o0Aeu5uMjqdL/I6nS/xyq2PgHrubjB67m4weu5uMHs+3QCML/qgjC/6oIwv+qH73wxj+4
        2v8/uNr/H73wxgbA/58Iwv9gAP//AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJePff+Xj33/nZOB4wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACupZBVrqSQ/66kkP+upZBVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAl499/5ePff+dk4HjAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAK6lkFWupJD/rqSQ/66lkFUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACXj37/l499/5yUgecAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAArqWPW66kkP+upJD/rqWRTwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJqSf/uXj33/mpKA+gAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACupJCHrqSQ/66kkP+soo40AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnZWC2ZeP
        ff+Xj33/oZeEoAAAAAAAAAAAAAAAAAAAAAAAAAAAqqKRHq6kkfCupJD/rqSQ7L+/gAQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACem4ZUl499/5ePff+ZkH3+oZeEoAAAAAAAAAAAAAAAAK6hjSaupJDPrqSQ/66kkP+to5F9AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACeloPAl499/5ePff+Xj33/mpGA+qCYhdWtpJDIrqSQ/K6kkP+upJD/rqSQyp+f
        nwgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//gAKeloPAl499/5ePff+Xj33/n5aD/66kkP+upJD/rqSQ/66k
        kL6zpowUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACem4ZUnJSB2ZqSf/ufl4T9rqSQ6a6k
        kLevo5FW////AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//wAAP/8AAD//AAA//wAAP/8AACAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAD/wAAA/8AAAP/AAAD/wAAA/8AAAP/AAAD/wAAA/8AAAP/AAAH/4AAB//x/D//8fw///H8
        P//x/D//8Pg///Bwf//4AH//+AD///4B//8=
</value>
  </data>
</root>